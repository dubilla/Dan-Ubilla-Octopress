<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web-development | Dan Ubilla]]></title>
  <link href="http://danubilla.com/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://danubilla.com/"/>
  <updated>2018-01-08T21:33:02-05:00</updated>
  <id>http://danubilla.com/</id>
  <author>
    <name><![CDATA[Dan Ubilla]]></name>
    <email><![CDATA[dan.ubilla@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular Testing: Services]]></title>
    <link href="http://danubilla.com/blog/web-development/angular-testing-services.html"/>
    <updated>2016-08-01T22:11:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/angular-testing-services</id>
    <content type="html"><![CDATA[<p><a href="https://angularjs.org/">Angular</a> <a href="https://docs.angularjs.org/guide/services">services</a> serve as a way for us to store data that will be shared through our various Angular components. Services act as a single-point of truth for our application&rsquo;s data, and as such they are often reused, sometimes heavily. Ensuring services are well-tested is a crucial part of maintaining a healthy Angular app.</p>

<!-- more -->


<p>Along with acting as a data store, Angular components are singletons, which make them great candidates for housing shared code. In particular, services are a great interface between the Angular app and the backend, so, hopefully, your services are using Angular&rsquo;s <code>$http</code> service to do this communication. Mocking out the response from <code>$http</code> will be necessary to testing many services.</p>

<h3>Service Testing</h3>

<p>Let&rsquo;s build our spec using the lessons we learned last time. We&rsquo;ll start with a <code>PlayerService</code>.</p>

<p>``` coffeescript
angular.module(&lsquo;core&rsquo;)
.factory &lsquo;PlayerService&rsquo;, &ndash;></p>

<p>  getTypes: &ndash;></p>

<pre><code>['all', 'available']
</code></pre>

<p>```</p>

<p>Here is our Player service. Note that we are using a factory under the hood. The differences between factories and services are minimal, so it&rsquo;s usually best to pick one for a project and stick with it throughout.</p>

<p>``` coffeescript
describe &lsquo;PlayerService&rsquo;, &ndash;>
  PlayerService = null</p>

<p>  beforeEach &ndash;></p>

<pre><code>module 'core'
inject (_PlayerService_) -&gt;
  PlayerService = _PlayerService_
</code></pre>

<p>```</p>

<p>And here&rsquo;s our spec for the Player service. Recalling a lesson from last time, we initialize the <code>PlayerService</code> at the top of the spec. In the <code>beforeEach</code> block, we initialize the <code>core</code> module, where our <code>PlayerService</code> lives. And then, because we intend on calling the service outside of this <code>beforeEach</code> block, we make sure we inject it using the underscore notation.</p>

<p>Let&rsquo;s add a spec for the <code>#getTypes</code> method.</p>

<p>``` coffeescript
describe &lsquo;PlayerService&rsquo;, &ndash;>
  PlayerService = null</p>

<p>  beforeEach &ndash;></p>

<pre><code>module 'core'
inject (_PlayerService_) -&gt;
  PlayerService = _PlayerService_
</code></pre>

<p>  describe &lsquo;#getTypes&rsquo;, &ndash;></p>

<pre><code>it 'should return both types', -&gt;
  expect(PlayerService.getTypes()).to.eql ['all', 'available']
</code></pre>

<p>```</p>

<p>Not too bad. Services are perfect candidates for unit testing. Every public method in a service can and should have a corresponding test.</p>

<p>In this instance, we don&rsquo;t need any further setup to test this method. We can make the call directly in the first argument of the <code>expect</code> call. Because the method returns an array, we need to use the <a href="http://www.chaijs.com">Chai</a> method <code>eql</code>. <code>eq</code> can be used for primitives; it checks for direct equality. <code>eql</code> iterates through the items being compared and checks for deep equality. For this reason, <code>eql</code> must be used for checking equality of objects and arrays.</p>

<p>Now let&rsquo;s see an example where we need to test some more logic.</p>

<p>``` coffeescript
angular.module(&lsquo;core&rsquo;)
.factory &lsquo;PlayerService&rsquo;, (currentUser) &ndash;></p>

<p>  getTypes: &ndash;></p>

<pre><code>if currentUser.isAdmin
  ['all', 'available', 'pending']
else
  ['all', 'available']
</code></pre>

<p>```</p>

<p>Now <code>#getTypes</code> checks on the value of an external service, <code>currentUser</code>, before returning a value. Let&rsquo;s see how to account for that external service and the extra conditional.</p>

<p>``` coffeescript
describe &lsquo;PlayerService&rsquo;, &ndash;>
  PlayerService = currentUser = scope = null</p>

<p>  beforeEach &ndash;></p>

<pre><code>module 'core'
inject (_PlayerService_, _currentUser_, $rootScope) -&gt;
  PlayerService = _PlayerService_
  currentUser = _currentUser_
  scope = $rootScope.$new()
</code></pre>

<p>  describe &lsquo;#getTypes&rsquo;, &ndash;></p>

<pre><code>describe 'current user is admin', -&gt;
  beforeEach -&gt;
    currentUser.isAdmin = true
    scope.$digest()
  it 'should return both types', -&gt;
    expect(PlayerService.getTypes()).to.eql ['all', 'available', 'pending']
describe 'current user is NOT an admin', -&gt;
  beforeEach -&gt;
    currentUser.isAdmin = false
    scope.$digest()
  it 'should return both types', -&gt;
    expect(PlayerService.getTypes()).to.eql ['all', 'available']
</code></pre>

<p>```</p>

<p>Alright, our spec has blown out a bit. We are injecting two more services. The first makes sense: we need to set values on <code>currentUser</code> to fully test out <code>#getTypes</code>. The second is a bit less intuitive: We inject <code>$rootScope</code> so we can create a scope for our test set up. We&rsquo;ll need this scope to run a digest cycle to update the state for our assertion.</p>

<p>We still have a single describe block for our single function, but now, we test out both forks of the conditional in our <code>#getTypes</code> method. So, we need test set up for each block. We set <code>isAdmin</code> on the external service before each expectation. After any sort of test set up, we need to digest the scope to propagate the change. And our method is fully tested!</p>

<h3>$http and $httpBackend</h3>

<p>What will the service look like when we have an external service? We need to add the <code>$http</code> <a href="https://docs.angularjs.org/api/ng/service/$http">service</a> to make a server-side request.</p>

<p>``` coffeescript
angular.module(&lsquo;core&rsquo;)
.factory &lsquo;PlayerService&rsquo;, ($http, $log) &ndash;></p>

<p>  findAll: &ndash;></p>

<pre><code>$http.get('/api/v1/players').then (response) -&gt;
  response.data
, (errors) -&gt;
  $log(error) for error in errors
</code></pre>

<p>```</p>

<p>In this example, we&rsquo;re making a GET request. The <code>get</code> functions makes that request and returns a promise. The first argument in that promise is run on a successful request; the second is run on an unsuccessful one.</p>

<p>ngMock comes with <code>$httpBackend</code>: <a href="https://docs.angularjs.org/api/ngMock/service/$httpBackend">a mocked out</a> <code>$http</code> service. Before we take a look at any expectations, let&rsquo;s take a look at the test set up.</p>

<p>``` coffeescript
describe &lsquo;PlayerService&rsquo;, &ndash;>
  PlayerService = currentUser = $httpBackend = null</p>

<p>  beforeEach &ndash;></p>

<pre><code>module 'core'
inject (_PlayerService_, _$httpBackend_) -&gt;
  PlayerService = _PlayerService_
  $httpBackend = _$httpBackend_
</code></pre>

<p>  afterEach &ndash;></p>

<pre><code>$httpBackend.verifyNoOutstandingExpectation()
$httpBackend.verifyNoOutstandingRequest()
</code></pre>

<p>```</p>

<p>We&rsquo;ll be using $httpBackend throughout the spec, so we start by initializing it at the top and injecting it with the underscore syntax. Then, we immediately set up an <code>afterEach</code> block. Calling <code>#verifyNoOutstandingExpectation</code> and <code>#verifyNoOutstandingRequest</code> ensures that the expectations set up are here are torn down correctly. Without these calls, it&rsquo;s possible that the tests here could step on subsequent tests and cause them to fail. These test failures can be hard to hunt down and fix, so tearing down the <code>$httpBackend</code> expectations are imperative.</p>

<p>Let&rsquo;s look at a spec for the successful case next.</p>

<p>``` coffeescript
describe &lsquo;PlayerService&rsquo;, &ndash;>
  PlayerService = currentUser = null</p>

<p>  beforeEach &ndash;></p>

<pre><code>module 'core'
inject (_PlayerService_, _$httpBackend_) -&gt;
  PlayerService = _PlayerService_
  $httpBackend = _$httpBackend_
</code></pre>

<p>  afterEach &ndash;></p>

<pre><code>$httpBackend.verifyNoOutstandingExpectation()
$httpBackend.verifyNoOutstandingRequest()
</code></pre>

<p>  describe &lsquo;#findAll&rsquo;, &ndash;></p>

<pre><code>describe 'successful', -&gt;
  beforeEach -&gt;
    $httpBackend.expectGET('/api/v1/players')
    PlayerService.findAll()
  it 'should return both types', -&gt;
    $httpBackend.flush()
</code></pre>

<p>```</p>

<p>Let&rsquo;s walk through this one line by line starting with the test set up for <code>#findAll</code>. We start by calling <code>$httpBackend.expectGET</code> which sets up an expectation that the url passed in will be called. Next, we make the call to the method we are testing. Finally, in the <code>it</code> block, we call <code>flush</code>. This resolves all <code>$http</code> calls. With this flush, all of our expectations are met, and the test passes.</p>

<p>And our spec testing errors:</p>

<p>``` coffeescript
describe &lsquo;PlayerService&rsquo;, &ndash;>
  PlayerService = currentUser = $log = null</p>

<p>  beforeEach &ndash;></p>

<pre><code>module 'core'
inject (_PlayerService_, _$httpBackend_, _$log_) -&gt;
  PlayerService = _PlayerService_
  $httpBackend = _$httpBackend_
  $log = _$log_
</code></pre>

<p>  describe &lsquo;#findAll&rsquo;, &ndash;></p>

<pre><code>describe 'successful', -&gt;
  beforeEach -&gt;
    $httpBackend.expectGET('/api/v1/players')
    PlayerService.findAll()
  it 'should return both types', -&gt;
    $httpBackend.flush()
describe 'error', -&gt;
  beforeEach -&gt;
    $httpBackend.whenGET('/api/v1/players').respond 422,
      ['Error']
    PlayerService.findAll()
    $httpBackend.flush()
  it 'should return both types', -&gt;
    expect($log.debug.logs).to.eql ['Error']
</code></pre>

<p>```</p>

<p><code>$httpBackend</code> has two different flavors of mocks. We saw the first in the success case: expect. The <code>expect</code> methods stub out requests that need to be called for the test to pass. In the error case we see the other flavor: when. The <code>when</code> methods are more forgiving. These requests don&rsquo;t need to be called, but when we flush out the <code>$http</code> service, we can set up the responses that will be returned. In fact, we&rsquo;ll get a &ldquo;No pending requests to flush&rdquo; error if we try to flush our requests that have not yet been set up. In this instance, we want to mock out an error, so we tell the service to return a 422 when it&rsquo;s flushed out. The second argument is the data response itself. The <code>$log</code> service holds the logs in the <code>debug</code> object which is set up perfectly for testing.</p>

<h3>Summary</h3>

<p>Services are shared components that can be used throughout your application. Because so much of your application depends on them, services should be tested thoroughly. If you are communicating with a server, you should be setting up those HTTP calls with Angular&rsquo;s <code>$http</code> service. <code>$httpBackend</code> is set up to mock out these backend responses. Hopefully, these patterns and tips should give you a strong foundation for keeping all of your service tests strong.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Introduction to Angular Testing]]></title>
    <link href="http://danubilla.com/blog/web-development/angular-testing-by-component.html"/>
    <updated>2016-05-17T13:46:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/angular-testing-by-component</id>
    <content type="html"><![CDATA[<p><a href="https://angularjs.org/">AngularJS</a> is designed to be as testable as possible. With its use of dependency injection, creating and manipulating mocks to test out individual components of your Angular application can be done in a stable, reliable way. Testing out each Angular component, however, comes with its own set of patterns to apply. Some of these patterns are similar cross-component, and using and understanding these core concepts of Angular testing can act as a nice bootstrap to your testing process.</p>

<!-- more -->


<p>There are a number of tools that can be combined to create an Angular framework. For these purposes, I&rsquo;ll be using <a href="http://coffeescript.org/">CoffeeScript</a> as a JavaScript precompiler, <a href="https://karma-runner.github.io/">Karma</a> as a test runner, <a href="https://mochajs.org/">Mocha</a> as a testing library, and <a href="http://chaijs.com/">Chai</a>, with expect syntax, as an assertion library. Before we take a look at testing Angular components, let&rsquo;s start by getting a closer look at our testing and assertion libraries.</p>

<h3>Mocha and Chai</h3>

<p>Let&rsquo;s start by taking a look at a very pared down of an AngularJS test, and we&rsquo;ll build on it over the course of this post.</p>

<p>``` coffeescript
describe &lsquo;TeamService&rsquo;, &ndash;>
  describe &lsquo;exists&rsquo;, &ndash;></p>

<pre><code>...
</code></pre>

<p>```</p>

<p>If you&rsquo;ve used a test framework like RSpec or Minitest for Ruby before, the structure should look familiar. Mocha, and Jasmine, organize test assertions inside <code>describe</code> blocks. <code>describe</code> methods take two arguments: a string that should act as a human readable description for the state that follows, and a method that will contain a mix of assertions and more <code>describe</code> methods. These <code>describe</code> blocks do two things: they group specs together to help create a readable assertion and they provide a place to set up mocks for each assertion.</p>

<p>Let&rsquo;s see how we can use describe blocks to set up different test scenarios using Mocha&rsquo;s beforeEach method.</p>

<p>``` coffeescript
describe &lsquo;TeamService&rsquo;, &ndash;>
  TeamService = null</p>

<p>  describe &lsquo;when a team is passed in&rsquo;, &ndash;></p>

<pre><code>beforeEach -&gt;
  TeamService.team =
    id: 1
it 'should should have a team', -&gt;
  expect(TeamService).to.have.property('team')
</code></pre>

<p>  describe &lsquo;when a team is not passed in&rsquo;, &ndash;></p>

<pre><code>it 'should not have a team', -&gt;
  expect(TeamService).to.not.have.property('team')
</code></pre>

<p>```</p>

<p>There&rsquo;s a lot going on above, so let&rsquo;s take it one thing at a time. Let&rsquo;s focus on the <code>beforeEach</code> method added above. By organizing our Angular specs into <code>describe</code> blocks that connote state, we&rsquo;re able to set up test data inside of the <code>beforeEach</code> method. <code>beforeEach</code> takes one argument: a method that will be executed before assertions are run. In fact, we&rsquo;re able to continue to nest <code>describe</code> blocks with their own <code>beforeEach</code> method, and we can be confident that they will run in order before each assertion is run. This allows us to construct specs that build state on themselves which should lead to readable, DRY tests. In the above example we describe two different states, and we&rsquo;re able to set up each using <code>beforeEach</code>.</p>

<p>In order to access these variables across various <code>describe</code> blocks, we declare these variables inside the outermost <code>describe</code> block. We set our CoffeeScript variables equal to <code>null</code> as a way of declaring them. We could just as easily declare these by setting them equal to <code>undefined</code>. There should be no difference, so pick a convention and stick with it.</p>

<p>One last thing to note on the example above: we&rsquo;ve added some new types of assertions. Assertions are denoted by the <code>it</code> method, which takes a string and a method. The second argument of the <code>it</code> block should contain an assertion. These assertions are the heart of the spec. As stated above, this assertion is written using Chai as our assertion library for our foray into Angular testing. Chai offers a bevy of different, interesting, and, most importantly, descriptive ways to write assertions. In the above example, our first assertions ensure the <code>team</code> property is on <code>TeamService</code>, and in the second, we assert that it&rsquo;s not.</p>

<h3>Angular</h3>

<p>In order to more easily test our Angular code, the Angular team provides a mocking library, ngMock, a mocking library. ngMock has two very important methods: <code>module</code> and <code>inject</code>. <code>module</code> take a string and loads in the corresponding Angular module. <code>inject</code> takes functions that wrap injectable services and providers. Let&rsquo;s see them in action:</p>

<p>``` coffeescript
describe &lsquo;TeamService&rsquo;, &ndash;>
  TeamService = null</p>

<p>  beforeEach &ndash;></p>

<pre><code>module 'core'
inject (_TeamService_) -&gt;
  TeamService = _TeamService_
  TeamService.emptyRoster()
</code></pre>

<p>  it &lsquo;should have an empty list of players&rsquo;, &ndash;></p>

<pre><code>expect(TeamService.players).to.eql []
</code></pre>

<p>```</p>

<p>The very first thing we do inside our root <code>beforeEach</code> block is load the module that the <code>TeamService</code> is on. As soon as its loaded, we can begin injecting any dependencies we need to call as a part of testing the <code>TeamService</code>. In this case, we inject the <code>TeamService</code>. One thing to note is the underscore wrapping notation we use to inject the service. If we were to inject <code>TeamService</code>, we would not be able to reference the service in any subsequent <code>describe</code> or <code>it</code> blocks without declaring it in a parent scope. If we declare it at the top as <code>TeamService</code> however, then, we won&rsquo;t be able to inject <code>TeamService</code>. In order to handle this, Angular mocks provide us with an underscore-wrapped version of every service which resolves to that service itself. Injecting <code>_TeamService_</code> and setting it to the <code>TeamService</code> declared above, will then allow us to use <code>TeamService</code> throughout the spec. As a rule of thumb, if you only need to use a service inside the top-level <code>describe</code> block, you can use the standard service injection syntax; if you will need to call that service in subsequent blocks of the spec, you should use the underscore syntax for injection.</p>

<p>Once the services and providers needed for the spec are declared and injected, we can use them throughout our test. In this case, we confirm that after running <code>TeamService.emptyRoster()</code> the <code>TeamService</code> has an empty <code>players</code> array.</p>

<h3>Summary</h3>

<p>Mochai and Chai can be great building blocks to setting up JS and Angular specs. With the patterns above, we are just scratching the surface. In future posts, I&rsquo;ll explore more patterns for testing Angular Services, Controllers, Directives, and more. So check back soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Active Support Presence and the Single Line Method]]></title>
    <link href="http://danubilla.com/blog/web-development/activesupport-presence.html"/>
    <updated>2016-02-14T15:00:00-05:00</updated>
    <id>http://danubilla.com/blog/web-development/activesupport-presence</id>
    <content type="html"><![CDATA[<p>Ruby and Rails are both built to help us write concise, meaningful code. One pattern I constantly find myself writing is a method that returns one thing, if it exists, or a default value. This can work well upfront, but it takes a little more care if the case gets any more complex. Fortunately, Rails has just the trick to keep the more complex case nice and lean in its ActiveSupport gem.</p>

<!-- more -->


<p>Let&rsquo;s look at an example that works without Rails.</p>

<p><code>ruby
def title
  label || 'New Page'
end
</code></p>

<p>The above looks great. It will return label, if it exists, or it falls back to returning &lsquo;New Page&rsquo;. I&rsquo;m pretty thrilled with it. But what if we need to <code>titleize</code> the label?</p>

<p><code>ruby
def title
  label.titleize || 'New Page'
end
</code></p>

<p>Unfortunately, the above will throw an error if <code>label</code> is nil. That kind of defeats the purpose of the conditional in the first place. At this point, it&rsquo;d be easy to toss away our desire for concisement and write the following:</p>

<p>``` ruby
def title
  if label.present?</p>

<pre><code>label.titleize
</code></pre>

<p>  else</p>

<pre><code>'New Page'
</code></pre>

<p>  end
end
```</p>

<p>Our new method will work. But how can we leverage Rails to make our method a little sharper? ActiveSupport comes with a <code>#presence</code> method that returns the original object, if it exists, or <code>nil</code> otherwise. Let&rsquo;s see it in action.</p>

<p><code>ruby
def title
  label.titleize.presence || 'New Page'
end
</code></p>

<p>Boom! Our method is nice, lean, and readable. <code>#presence</code> is the secret to manipulating and returning a variable before it exists or falling back to a default.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularUI Router and Injecting $state vs $stateParams]]></title>
    <link href="http://danubilla.com/blog/web-development/angularui-router-and-injecting-state-vs-stateparams.html"/>
    <updated>2016-01-31T19:31:00-05:00</updated>
    <id>http://danubilla.com/blog/web-development/angularui-router-and-injecting-state-vs-stateparams</id>
    <content type="html"><![CDATA[<p>AngularUI Router is the de facto routing library in the Angular world. It takes the traditional routing mechanisms, and builds a subtle, but brilliant abstraction upon them. Instead of merely listening for requests at a set of URLs, it creates the concept of a set of states, each one configurable with an optional URL. This abstraction allows for flexibility when refactoring routes, but most interestingly, it creates the concept of a current state and stores key-value parameters of that state. Both the application&rsquo;s state and state parameters are available for injection with $state and $stateParams respectively, although, as we&rsquo;ll see, only one is necessary for injection in any given controller.</p>

<!-- more -->


<p>The <code>$state</code> service provides a number of useful methods for manipulating the state as well as pertinent data on the current state. The current state parameters are accessible on the $state service at the <code>params</code> key. The <code>$stateParams</code> service returns this very same object. Hence, the <code>$stateParams</code> service is strictly a convenience service to quickly access the <code>params</code> object on the <code>$state</code> service.</p>

<p><code>javascript
angular.equals($state.params, $stateParams)
// true
</code></p>

<p>As such, no controller should ever inject both the <code>$state</code> service and its convenience service, <code>$stateParams</code>. If the <code>$state</code> is being injected just to access the current parameters, the controller should be rewritten to inject <code>$stateParams</code> instead.</p>

<p>Let&rsquo;s take a look at a few examples to could be rewritten to minimize our injections and concerns and to generally clean up our controllers.</p>

<p><strong>Example: Only need to access state parameters</strong></p>

<p><em>Before:</em>
``` javascript
MainCtrl = (function() {
  function MainCtrl($state) {</p>

<pre><code>this.label = $state.params.active;
</code></pre>

<p>  }
})();
app.controller(&lsquo;MainCtrl&rsquo;, [&lsquo;$state&rsquo;, MainCtrl]);
```</p>

<p><em>After:</em>
``` javascript
MainCtrl = (function() {
  function MainCtrl($stateParams) {</p>

<pre><code>this.label = $stateParams.active;
</code></pre>

<p>  }
})();
app.controller(&lsquo;MainCtrl&rsquo;, [&lsquo;$stateParams&rsquo;, MainCtrl]);
```</p>

<p>In the above example, the controller only needs to access the parameters of the current state. Injecting the <code>$state</code> service is, therefore, unnecessary. Injective the convenience service here is preferred.</p>

<p><strong>Example: Need to both transition state and access params</strong></p>

<p><em>Before:</em>
``` javascript
MainCtrl = (function() {
  function MainCtrl($state, $stateParams) {</p>

<pre><code>this.label = $stateParams.active;
</code></pre>

<p>  }</p>

<p>  MainCtrl.prototype.goToBeta = function() {</p>

<pre><code>this.$state.go('beta');
</code></pre>

<p>  }
})();
app.controller(&lsquo;MainCtrl&rsquo;, [&lsquo;$state&rsquo;, &lsquo;$stateParams&rsquo;, MainCtrl]);
```</p>

<p><em>After:</em>
``` javascript
MainCtrl = (function() {
  function MainCtrl($state) {</p>

<pre><code>this.label = $state.params.active;
</code></pre>

<p>  }</p>

<p>  MainCtrl.prototype.goToBeta = function() {</p>

<pre><code>this.$state.go('beta');
</code></pre>

<p>  }
})();
app.controller(&lsquo;MainCtrl&rsquo;, [&lsquo;$state&rsquo;, MainCtrl]);
```</p>

<p>In this example, we are using the <code>$state</code> service for its methods and not just for the parameters data it holds. In this case, again, we see that we do not need to inject both services. We can stick with the <code>$state</code> service and merely access the <code>params</code> key on the service.</p>

<p>As your controllers increase in complexity, so, too, do the benefits of including one service or the other. The list of injected services acts as a signature for a controller. Keeping this list lean is imperative to ensuring the controller&rsquo;s purpose is communicated efficiently. Ensuring that only one of the $state and $stateParams services will only help your projects' overall readability.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['stringify_keys' Error on update_attributes]]></title>
    <link href="http://danubilla.com/blog/web-development/stringify-keys-error-on-update-attribute.html"/>
    <updated>2014-03-30T09:30:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/stringify-keys-error-on-update-attribute</id>
    <content type="html"><![CDATA[<p>Rails is a fantastic framework to develop with, but it can occasionally be unforgiving when it comes to error throwing. I was recently coding up a soft delete method in a model when Rails gave me the perplexing error: &ldquo;Undefined Method `stringify_keys'&rdquo;. I wasn&rsquo;t calling stringify_keys anywhere in my method nor was it anywhere in my model. A grep through the app directory of the codebase came up empty as well, and I was stumped.</p>

<!-- more -->


<p>As it turns out, the error was being thrown from deeper in the code than in my application, but it was, in fact, my code that was in error.</p>

<p><code>ruby
def remove!
  self.update_attributes(:status, 'removed')
end
</code></p>

<p>The error lies in the arguments that are being passed into update_attributes. update_attributes expects one argument, a hash, whereas, I am providing two arguments, a key and a value. The error is exactly four characters long. The corrected code is below.</p>

<p><code>ruby
def remove!
  self.update_attributes(status =&gt; 'removed')
end
</code></p>

<p>h/t to <a href="http://stackoverflow.com/questions/7542774/undefined-method-stringify-keys-when-calling-update-attributes">Stack Overflow</a></p>
]]></content>
  </entry>
  
</feed>
