<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dan Ubilla]]></title>
  <link href="http://danubilla.com/atom.xml" rel="self"/>
  <link href="http://danubilla.com/"/>
  <updated>2018-02-03T17:16:37-05:00</updated>
  <id>http://danubilla.com/</id>
  <author>
    <name><![CDATA[Dan Ubilla]]></name>
    <email><![CDATA[dan.ubilla@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Three Takeaways from Scaling 101]]></title>
    <link href="http://danubilla.com/blog/management/three-takeaways-from-scaling-101.html"/>
    <updated>2018-02-03T16:55:00-05:00</updated>
    <id>http://danubilla.com/blog/management/three-takeaways-from-scaling-101</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I had the chance to catch For the Win’s panel on scaling teams. <a href="https://generalassemb.ly/education/scaling-101-how-to-grow-your-team-without-losing-your-culture/new-york-city">Scaling 101: How to Grow Your Team Without Losing Your Culture</a> was a panel consisting of leaders from engineering, HR, and recruiting discussing lessons learned from scaling teams at Meetup, Managed by Q, and others. The panel covered recruiting, interviewing, and onboarding in a tight hour. Here are the three lessons I took away from the panel.</p>

<!-- more -->


<h3>Convert and Converge Two Narratives</h3>

<p>When you are recruiting and building out your team, the team and the candidate are each interviewing the other. Each has an arc, a trajectory, of where they’ve been and where they want to go. As an organization, you need to be able to understand where the candidate sees their path leading them. You need to validate that the path the candidate sees for themselves is possible on your team. And then you need to do the reverse. Does the candidate’s path match the teams’ needs? Does it match the teams’ capacity?</p>

<blockquote><p>Convert and converge two narratives. Theirs and yours. And you need to do that better than everybody else.</p></blockquote>

<p>The good organizations are doing this work. And if the candidate you’re interviewing is also interviewing with other solid organizations, than you need to be converging these narratives better than your competition.</p>

<h3>Onboarding Starts with the First Interview</h3>

<p>It’s common to feel like recruiting a candidate and onboarding a new teammate are two steps that are done in serial. Instead, it’s best to reframe onboarding as a process that envelops recruiting. As you first get on the phone or meet up with a candidate, you are starting the story of them as a part of your team.</p>

<blockquote><p>Onboarding starts with the interview process. They should know what their life will look like.</p></blockquote>

<p>You should start to have an idea of what the employee’s first days, weeks, and months will look like after that first call. You’ll spend the rest of the interview process shaping that up. By the time of the offer, the candidate should know exactly what they’re signing up for. A 30/60/90 plan can be a great way to communicate what their life on your team will look like.</p>

<h3>Try and Scare the Candidate Away</h3>

<p>We’ve all been in a situation before where a candidate asks a tough question. We hem and we haw, and our instinct is to sugarcoat the answer. The panel didn’t just suggest shooting straight; they suggested airing your dirty laundry in the interview process.</p>

<blockquote><p>Be as transparent with the situation as possible in the interview process. Try and scare them away early because they’ll figure it out on day one.</p></blockquote>

<p>Let the candidates know the issues you’ve been having. You might be bringing the candidate on board to solve some of those problems. And for the many other problems that exist, and will continue to exist, the candidate will find out sooner or later. Being outrageously frank during the interview process will only save everybody’s time.</p>

<hr />

<p>Big thanks to <a href="https://twitter.com/ftwnyc">FTW</a>, <a href="https://generalassemb.ly/">General Assembly</a>, the host, <a href="https://twitter.com/benjaminjackson">Benjamin Jackson</a>, and the panelists — <a href="https://www.instagram.com/dinasays/">Dina Friedel</a>, <a href="https://generalassemb.ly/instructors/amy-wolf-forrester/15648">Amy Wolf Forrester</a>, <a href="https://twitter.com/danmanian">Dan Manian</a>, and <a href="https://generalassemb.ly/instructors/jonathan-basker/15605">Jonathan Basker</a> —  for the event, and apologies for not taking down the proper individual attributions for the takeaways above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are Your Signals?]]></title>
    <link href="http://danubilla.com/blog/management/what-are-your-signals.html"/>
    <updated>2018-01-08T20:42:00-05:00</updated>
    <id>http://danubilla.com/blog/management/what-are-your-signals</id>
    <content type="html"><![CDATA[<p>I was recently in a one-on-one with a tech lead when we began talking about how his team was doing. His team had recently added one member and lost another, so the chemistry of the team was a topic that was on our minds. He mentioned how he felt the team was coming together, and I found myself asking a question that I’ve been reaching for a lot lately: “What are your signals?”</p>

<!-- more -->


<blockquote><p> What Are Your Signals?</p></blockquote>

<p>I find myself asking the question time and again because I find that the question opens up the conversation in so many ways. At its surface, it allows us to get to a deeper level. It anchors the conversation in a sentiment, which is great for a one-on-one, and begins to explore what is causing the feeling. By asking for the signals, I also want the person I manage to know that I’m there with them. I’m agreeing, for now at least, that the team is coming together, and now I want to talk about what’s driving him to that conclusion.</p>

<p>The question also allows me to find out if my report and I are looking at the same things. If the engineer is looking at something I don’t want or think our team should value, it’s a great chance to coach them away from that signal. If I feel the signal is particularly valuable, I have the opportunity to give positive reinforcement. Often, the conversation will lead to us exchanging signals with each of us growing our own set of tells.</p>

<p>Lastly, with any question I regularly ask in a one-on-one, I’m hoping to establish a pattern. If I ask an engineer what signals she has for a particular feeling or sentiment, I hope they continue to ask themselves the same question the next time they have a gut feeling. The more solid that engineer feels in the “why” behind their feeling, the faster we get to talk about that in our own one-on-one.</p>

<p>“What are your signals?” is a question you can ask regardless of whether the feeling is a positive or negative one. I’ve found myself asking it in a number of scenarios recently.
* “The team doesn’t seem excited lately.”
* “I think our new member is really hitting their stride.”
* “Things feel more stressful lately.”</p>

<p>Keep the question in your backpocket. Bring it out the next time you want to go deeper in a one-on-one. Enjoy your conversation, and I hope you get to learn something new!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular Testing: Services]]></title>
    <link href="http://danubilla.com/blog/web-development/angular-testing-services.html"/>
    <updated>2016-08-01T22:11:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/angular-testing-services</id>
    <content type="html"><![CDATA[<p><a href="https://angularjs.org/">Angular</a> <a href="https://docs.angularjs.org/guide/services">services</a> serve as a way for us to store data that will be shared through our various Angular components. Services act as a single-point of truth for our application&rsquo;s data, and as such they are often reused, sometimes heavily. Ensuring services are well-tested is a crucial part of maintaining a healthy Angular app.</p>

<!-- more -->


<p>Along with acting as a data store, Angular components are singletons, which make them great candidates for housing shared code. In particular, services are a great interface between the Angular app and the backend, so, hopefully, your services are using Angular&rsquo;s <code>$http</code> service to do this communication. Mocking out the response from <code>$http</code> will be necessary to testing many services.</p>

<h3>Service Testing</h3>

<p>Let&rsquo;s build our spec using the lessons we learned last time. We&rsquo;ll start with a <code>PlayerService</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;core&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span> <span class="s">&#39;PlayerService&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">getTypes: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="s">&#39;all&#39;</span><span class="p">,</span> <span class="s">&#39;available&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is our Player service. Note that we are using a factory under the hood. The differences between factories and services are minimal, so it&rsquo;s usually best to pick one for a project and stick with it throughout.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;PlayerService&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">PlayerService = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">module</span> <span class="s">&#39;core&#39;</span>
</span><span class='line'>    <span class="nx">inject</span> <span class="nf">(_PlayerService_) -&gt;</span>
</span><span class='line'>      <span class="nv">PlayerService = </span><span class="nx">_PlayerService_</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s our spec for the Player service. Recalling a lesson from last time, we initialize the <code>PlayerService</code> at the top of the spec. In the <code>beforeEach</code> block, we initialize the <code>core</code> module, where our <code>PlayerService</code> lives. And then, because we intend on calling the service outside of this <code>beforeEach</code> block, we make sure we inject it using the underscore notation.</p>

<p>Let&rsquo;s add a spec for the <code>#getTypes</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;PlayerService&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">PlayerService = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">module</span> <span class="s">&#39;core&#39;</span>
</span><span class='line'>    <span class="nx">inject</span> <span class="nf">(_PlayerService_) -&gt;</span>
</span><span class='line'>      <span class="nv">PlayerService = </span><span class="nx">_PlayerService_</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;#getTypes&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;should return both types&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">PlayerService</span><span class="p">.</span><span class="nx">getTypes</span><span class="p">()).</span><span class="nx">to</span><span class="p">.</span><span class="nx">eql</span> <span class="p">[</span><span class="s">&#39;all&#39;</span><span class="p">,</span> <span class="s">&#39;available&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not too bad. Services are perfect candidates for unit testing. Every public method in a service can and should have a corresponding test.</p>

<p>In this instance, we don&rsquo;t need any further setup to test this method. We can make the call directly in the first argument of the <code>expect</code> call. Because the method returns an array, we need to use the <a href="http://www.chaijs.com">Chai</a> method <code>eql</code>. <code>eq</code> can be used for primitives; it checks for direct equality. <code>eql</code> iterates through the items being compared and checks for deep equality. For this reason, <code>eql</code> must be used for checking equality of objects and arrays.</p>

<p>Now let&rsquo;s see an example where we need to test some more logic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;core&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span> <span class="s">&#39;PlayerService&#39;</span><span class="p">,</span> <span class="nf">(currentUser) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">getTypes: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">currentUser</span><span class="p">.</span><span class="nx">isAdmin</span>
</span><span class='line'>      <span class="p">[</span><span class="s">&#39;all&#39;</span><span class="p">,</span> <span class="s">&#39;available&#39;</span><span class="p">,</span> <span class="s">&#39;pending&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="p">[</span><span class="s">&#39;all&#39;</span><span class="p">,</span> <span class="s">&#39;available&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>#getTypes</code> checks on the value of an external service, <code>currentUser</code>, before returning a value. Let&rsquo;s see how to account for that external service and the extra conditional.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;PlayerService&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">PlayerService = currentUser = scope = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">module</span> <span class="s">&#39;core&#39;</span>
</span><span class='line'>    <span class="nx">inject</span> <span class="nf">(_PlayerService_, _currentUser_, $rootScope) -&gt;</span>
</span><span class='line'>      <span class="nv">PlayerService = </span><span class="nx">_PlayerService_</span>
</span><span class='line'>      <span class="nv">currentUser = </span><span class="nx">_currentUser_</span>
</span><span class='line'>      <span class="nv">scope = </span><span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;#getTypes&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">describe</span> <span class="s">&#39;current user is admin&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nv">currentUser.isAdmin = </span><span class="kc">true</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">$digest</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&#39;should return both types&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">PlayerService</span><span class="p">.</span><span class="nx">getTypes</span><span class="p">()).</span><span class="nx">to</span><span class="p">.</span><span class="nx">eql</span> <span class="p">[</span><span class="s">&#39;all&#39;</span><span class="p">,</span> <span class="s">&#39;available&#39;</span><span class="p">,</span> <span class="s">&#39;pending&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="nx">describe</span> <span class="s">&#39;current user is NOT an admin&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nv">currentUser.isAdmin = </span><span class="kc">false</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">$digest</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&#39;should return both types&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">PlayerService</span><span class="p">.</span><span class="nx">getTypes</span><span class="p">()).</span><span class="nx">to</span><span class="p">.</span><span class="nx">eql</span> <span class="p">[</span><span class="s">&#39;all&#39;</span><span class="p">,</span> <span class="s">&#39;available&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alright, our spec has blown out a bit. We are injecting two more services. The first makes sense: we need to set values on <code>currentUser</code> to fully test out <code>#getTypes</code>. The second is a bit less intuitive: We inject <code>$rootScope</code> so we can create a scope for our test set up. We&rsquo;ll need this scope to run a digest cycle to update the state for our assertion.</p>

<p>We still have a single describe block for our single function, but now, we test out both forks of the conditional in our <code>#getTypes</code> method. So, we need test set up for each block. We set <code>isAdmin</code> on the external service before each expectation. After any sort of test set up, we need to digest the scope to propagate the change. And our method is fully tested!</p>

<h3>$http and $httpBackend</h3>

<p>What will the service look like when we have an external service? We need to add the <code>$http</code> <a href="https://docs.angularjs.org/api/ng/service/$http">service</a> to make a server-side request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s">&#39;core&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span> <span class="s">&#39;PlayerService&#39;</span><span class="p">,</span> <span class="nf">($http, $log) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">findAll: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;/api/v1/players&#39;</span><span class="p">).</span><span class="nx">then</span> <span class="nf">(response) -&gt;</span>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">data</span>
</span><span class='line'>    <span class="p">,</span> <span class="nf">(errors) -&gt;</span>
</span><span class='line'>      <span class="nx">$log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">for</span> <span class="nx">error</span> <span class="k">in</span> <span class="nx">errors</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, we&rsquo;re making a GET request. The <code>get</code> functions makes that request and returns a promise. The first argument in that promise is run on a successful request; the second is run on an unsuccessful one.</p>

<p>ngMock comes with <code>$httpBackend</code>: <a href="https://docs.angularjs.org/api/ngMock/service/$httpBackend">a mocked out</a> <code>$http</code> service. Before we take a look at any expectations, let&rsquo;s take a look at the test set up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;PlayerService&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">PlayerService = currentUser = $httpBackend = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">module</span> <span class="s">&#39;core&#39;</span>
</span><span class='line'>    <span class="nx">inject</span> <span class="nf">(_PlayerService_, _$httpBackend_) -&gt;</span>
</span><span class='line'>      <span class="nv">PlayerService = </span><span class="nx">_PlayerService_</span>
</span><span class='line'>      <span class="nv">$httpBackend = </span><span class="nx">_$httpBackend_</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">afterEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">verifyNoOutstandingExpectation</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">verifyNoOutstandingRequest</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll be using $httpBackend throughout the spec, so we start by initializing it at the top and injecting it with the underscore syntax. Then, we immediately set up an <code>afterEach</code> block. Calling <code>#verifyNoOutstandingExpectation</code> and <code>#verifyNoOutstandingRequest</code> ensures that the expectations set up are here are torn down correctly. Without these calls, it&rsquo;s possible that the tests here could step on subsequent tests and cause them to fail. These test failures can be hard to hunt down and fix, so tearing down the <code>$httpBackend</code> expectations are imperative.</p>

<p>Let&rsquo;s look at a spec for the successful case next.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;PlayerService&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">PlayerService = currentUser = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">module</span> <span class="s">&#39;core&#39;</span>
</span><span class='line'>    <span class="nx">inject</span> <span class="nf">(_PlayerService_, _$httpBackend_) -&gt;</span>
</span><span class='line'>      <span class="nv">PlayerService = </span><span class="nx">_PlayerService_</span>
</span><span class='line'>      <span class="nv">$httpBackend = </span><span class="nx">_$httpBackend_</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">afterEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">verifyNoOutstandingExpectation</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">verifyNoOutstandingRequest</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;#findAll&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">describe</span> <span class="s">&#39;successful&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">expectGET</span><span class="p">(</span><span class="s">&#39;/api/v1/players&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">PlayerService</span><span class="p">.</span><span class="nx">findAll</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&#39;should return both types&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s walk through this one line by line starting with the test set up for <code>#findAll</code>. We start by calling <code>$httpBackend.expectGET</code> which sets up an expectation that the url passed in will be called. Next, we make the call to the method we are testing. Finally, in the <code>it</code> block, we call <code>flush</code>. This resolves all <code>$http</code> calls. With this flush, all of our expectations are met, and the test passes.</p>

<p>And our spec testing errors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;PlayerService&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">PlayerService = currentUser = $log = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">module</span> <span class="s">&#39;core&#39;</span>
</span><span class='line'>    <span class="nx">inject</span> <span class="nf">(_PlayerService_, _$httpBackend_, _$log_) -&gt;</span>
</span><span class='line'>      <span class="nv">PlayerService = </span><span class="nx">_PlayerService_</span>
</span><span class='line'>      <span class="nv">$httpBackend = </span><span class="nx">_$httpBackend_</span>
</span><span class='line'>      <span class="nv">$log = </span><span class="nx">_$log_</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;#findAll&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">describe</span> <span class="s">&#39;successful&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">expectGET</span><span class="p">(</span><span class="s">&#39;/api/v1/players&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">PlayerService</span><span class="p">.</span><span class="nx">findAll</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&#39;should return both types&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">describe</span> <span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">whenGET</span><span class="p">(</span><span class="s">&#39;/api/v1/players&#39;</span><span class="p">).</span><span class="nx">respond</span> <span class="mi">422</span><span class="p">,</span>
</span><span class='line'>          <span class="p">[</span><span class="s">&#39;Error&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nx">PlayerService</span><span class="p">.</span><span class="nx">findAll</span><span class="p">()</span>
</span><span class='line'>        <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&#39;should return both types&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">$log</span><span class="p">.</span><span class="nx">debug</span><span class="p">.</span><span class="nx">logs</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">eql</span> <span class="p">[</span><span class="s">&#39;Error&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$httpBackend</code> has two different flavors of mocks. We saw the first in the success case: expect. The <code>expect</code> methods stub out requests that need to be called for the test to pass. In the error case we see the other flavor: when. The <code>when</code> methods are more forgiving. These requests don&rsquo;t need to be called, but when we flush out the <code>$http</code> service, we can set up the responses that will be returned. In fact, we&rsquo;ll get a &ldquo;No pending requests to flush&rdquo; error if we try to flush our requests that have not yet been set up. In this instance, we want to mock out an error, so we tell the service to return a 422 when it&rsquo;s flushed out. The second argument is the data response itself. The <code>$log</code> service holds the logs in the <code>debug</code> object which is set up perfectly for testing.</p>

<h3>Summary</h3>

<p>Services are shared components that can be used throughout your application. Because so much of your application depends on them, services should be tested thoroughly. If you are communicating with a server, you should be setting up those HTTP calls with Angular&rsquo;s <code>$http</code> service. <code>$httpBackend</code> is set up to mock out these backend responses. Hopefully, these patterns and tips should give you a strong foundation for keeping all of your service tests strong.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Active Support Presence and the Single Line Method]]></title>
    <link href="http://danubilla.com/blog/web-development/activesupport-presence.html"/>
    <updated>2016-02-14T15:00:00-05:00</updated>
    <id>http://danubilla.com/blog/web-development/activesupport-presence</id>
    <content type="html"><![CDATA[<p>Ruby and Rails are both built to help us write concise, meaningful code. One pattern I constantly find myself writing is a method that returns one thing, if it exists, or a default value. This can work well upfront, but it takes a little more care if the case gets any more complex. Fortunately, Rails has just the trick to keep the more complex case nice and lean in its ActiveSupport gem.</p>

<!-- more -->


<p>Let&rsquo;s look at an example that works without Rails.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">title</span>
</span><span class='line'>  <span class="n">label</span> <span class="o">||</span> <span class="s1">&#39;New Page&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above looks great. It will return label, if it exists, or it falls back to returning &lsquo;New Page&rsquo;. I&rsquo;m pretty thrilled with it. But what if we need to <code>titleize</code> the label?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">title</span>
</span><span class='line'>  <span class="n">label</span><span class="o">.</span><span class="n">titleize</span> <span class="o">||</span> <span class="s1">&#39;New Page&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, the above will throw an error if <code>label</code> is nil. That kind of defeats the purpose of the conditional in the first place. At this point, it&rsquo;d be easy to toss away our desire for concisement and write the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">title</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">label</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="n">label</span><span class="o">.</span><span class="n">titleize</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="s1">&#39;New Page&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our new method will work. But how can we leverage Rails to make our method a little sharper? ActiveSupport comes with a <code>#presence</code> method that returns the original object, if it exists, or <code>nil</code> otherwise. Let&rsquo;s see it in action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">title</span>
</span><span class='line'>  <span class="n">label</span><span class="o">.</span><span class="n">titleize</span><span class="o">.</span><span class="n">presence</span> <span class="o">||</span> <span class="s1">&#39;New Page&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boom! Our method is nice, lean, and readable. <code>#presence</code> is the secret to manipulating and returning a variable before it exists or falling back to a default.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularUI Router and Injecting $state vs $stateParams]]></title>
    <link href="http://danubilla.com/blog/web-development/angularui-router-and-injecting-state-vs-stateparams.html"/>
    <updated>2016-01-31T19:31:00-05:00</updated>
    <id>http://danubilla.com/blog/web-development/angularui-router-and-injecting-state-vs-stateparams</id>
    <content type="html"><![CDATA[<p>AngularUI Router is the de facto routing library in the Angular world. It takes the traditional routing mechanisms, and builds a subtle, but brilliant abstraction upon them. Instead of merely listening for requests at a set of URLs, it creates the concept of a set of states, each one configurable with an optional URL. This abstraction allows for flexibility when refactoring routes, but most interestingly, it creates the concept of a current state and stores key-value parameters of that state. Both the application&rsquo;s state and state parameters are available for injection with $state and $stateParams respectively, although, as we&rsquo;ll see, only one is necessary for injection in any given controller.</p>

<!-- more -->


<p>The <code>$state</code> service provides a number of useful methods for manipulating the state as well as pertinent data on the current state. The current state parameters are accessible on the $state service at the <code>params</code> key. The <code>$stateParams</code> service returns this very same object. Hence, the <code>$stateParams</code> service is strictly a convenience service to quickly access the <code>params</code> object on the <code>$state</code> service.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">$state</span><span class="p">.</span><span class="nx">params</span><span class="p">,</span> <span class="nx">$stateParams</span><span class="p">)</span>
</span><span class='line'><span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>As such, no controller should ever inject both the <code>$state</code> service and its convenience service, <code>$stateParams</code>. If the <code>$state</code> is being injected just to access the current parameters, the controller should be rewritten to inject <code>$stateParams</code> instead.</p>

<p>Let&rsquo;s take a look at a few examples to could be rewritten to minimize our injections and concerns and to generally clean up our controllers.</p>

<p><strong>Example: Only need to access state parameters</strong></p>

<p><em>Before:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MainCtrl</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">MainCtrl</span><span class="p">(</span><span class="nx">$state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">label</span> <span class="o">=</span> <span class="nx">$state</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">active</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$state&#39;</span><span class="p">,</span> <span class="nx">MainCtrl</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>After:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MainCtrl</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">MainCtrl</span><span class="p">(</span><span class="nx">$stateParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">label</span> <span class="o">=</span> <span class="nx">$stateParams</span><span class="p">.</span><span class="nx">active</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$stateParams&#39;</span><span class="p">,</span> <span class="nx">MainCtrl</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, the controller only needs to access the parameters of the current state. Injecting the <code>$state</code> service is, therefore, unnecessary. Injective the convenience service here is preferred.</p>

<p><strong>Example: Need to both transition state and access params</strong></p>

<p><em>Before:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MainCtrl</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">MainCtrl</span><span class="p">(</span><span class="nx">$state</span><span class="p">,</span> <span class="nx">$stateParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">label</span> <span class="o">=</span> <span class="nx">$stateParams</span><span class="p">.</span><span class="nx">active</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">MainCtrl</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">goToBeta</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$state</span><span class="p">.</span><span class="nx">go</span><span class="p">(</span><span class="s1">&#39;beta&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$state&#39;</span><span class="p">,</span> <span class="s1">&#39;$stateParams&#39;</span><span class="p">,</span> <span class="nx">MainCtrl</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>After:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MainCtrl</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">MainCtrl</span><span class="p">(</span><span class="nx">$state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">label</span> <span class="o">=</span> <span class="nx">$state</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">active</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">MainCtrl</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">goToBeta</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$state</span><span class="p">.</span><span class="nx">go</span><span class="p">(</span><span class="s1">&#39;beta&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$state&#39;</span><span class="p">,</span> <span class="nx">MainCtrl</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, we are using the <code>$state</code> service for its methods and not just for the parameters data it holds. In this case, again, we see that we do not need to inject both services. We can stick with the <code>$state</code> service and merely access the <code>params</code> key on the service.</p>

<p>As your controllers increase in complexity, so, too, do the benefits of including one service or the other. The list of injected services acts as a signature for a controller. Keeping this list lean is imperative to ensuring the controller&rsquo;s purpose is communicated efficiently. Ensuring that only one of the $state and $stateParams services will only help your projects&#8217; overall readability.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['stringify_keys' Error on update_attributes]]></title>
    <link href="http://danubilla.com/blog/web-development/stringify-keys-error-on-update-attribute.html"/>
    <updated>2014-03-30T09:30:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/stringify-keys-error-on-update-attribute</id>
    <content type="html"><![CDATA[<p>Rails is a fantastic framework to develop with, but it can occasionally be unforgiving when it comes to error throwing. I was recently coding up a soft delete method in a model when Rails gave me the perplexing error: &ldquo;Undefined Method `stringify_keys&#8217;&rdquo;. I wasn&rsquo;t calling stringify_keys anywhere in my method nor was it anywhere in my model. A grep through the app directory of the codebase came up empty as well, and I was stumped.</p>

<!-- more -->


<p>As it turns out, the error was being thrown from deeper in the code than in my application, but it was, in fact, my code that was in error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">remove!</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="ss">:status</span><span class="p">,</span> <span class="s1">&#39;removed&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The error lies in the arguments that are being passed into update_attributes. update_attributes expects one argument, a hash, whereas, I am providing two arguments, a key and a value. The error is exactly four characters long. The corrected code is below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">remove!</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">status</span> <span class="o">=&gt;</span> <span class="s1">&#39;removed&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>h/t to <a href="http://stackoverflow.com/questions/7542774/undefined-method-stringify-keys-when-calling-update-attributes">Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a New Post for Octopress from Zsh]]></title>
    <link href="http://danubilla.com/blog/web-development/creating-a-new-post-for-octopress-from-zsh.html"/>
    <updated>2014-01-31T00:17:00-05:00</updated>
    <id>http://danubilla.com/blog/web-development/creating-a-new-post-for-octopress-from-zsh</id>
    <content type="html"><![CDATA[<p>A couple of years back, I made the switch from bash to zsh. I did so mainly because I saw <a href="" title="http://code.tutsplus.com/tutorials/how-to-customize-your-command-prompt--net-24083&quot;, &quot;Customizing Your Command Prompt on Nettuts">a fantastic post</a> on customizing the command prompt that I dove into head first, and I&rsquo;ve stuck with it for the slightly improved tab completion. Your mileage may vary with regards to zsh, but I always find it difficult to do without it when I end up working on somebody else&rsquo;s machine. Despite the improvement, there are a few differences between the shells, and I&rsquo;ve come across a scipt or two that wasn&rsquo;t especially zsh friendly. One of those is the very rake task that created this blog post.</p>

<!-- more -->


<p>To create a post in Octopress from bash, you simply need to run the command:</p>

<blockquote><p>rake new_post[&ldquo;One man forgot to account for zsh&hellip;&rdquo;]</p></blockquote>

<p>Running the same command from zsh leaves you with a cryptic error:</p>

<blockquote><p>zsh: no matches found: new_post[One man forgot to account for zsh&hellip;]</p></blockquote>

<p>Zsh escapes the quotes necessary to name the new blog post, as you can see by the error that is output. The syntax that creates a blog post in bash causes zsh to begin attempting to match a filename.</p>

<p>To create a post in Octopress from zsh, you simply need to run the command:</p>

<blockquote><p>rake &ldquo;new_post[One man forgot to account for zsh&hellip;]&rdquo;</p></blockquote>

<p>It&rsquo;s a minor inconvenience, and one that could probably be solved by some extended documentation on the Octopress site. No harm, no foul; zsh Octopress bloggers just need to remember the change in syntax.</p>

<p>Any other zsh tips for Octopress? Or any noteworthy zsh &ldquo;workarounds&rdquo; to share? Drop them in comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing MaxWell]]></title>
    <link href="http://danubilla.com/blog/web-development/introducing-maxwell.html"/>
    <updated>2013-09-04T11:48:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/introducing-maxwell</id>
    <content type="html"><![CDATA[<p>In my last post, Yeoman, Backbone, and a Smarter Client, I discussed diving into the new development-minded technologies that have flooded the JS proverbial toolbox. The first project I put together with said tools is <a href="http://dubilla.github.io/Maxwell/">MaxWell</a>, a single-page web app for graphing your point totals in ESPN&rsquo;s Fantasy MaxPart games (think Pigskin Pick&#8217;em and ESPN&rsquo;s march madness game, Tournament Challenge). <a href="http://yeoman.io/">Yeoman</a> and <a href="https://github.com/yeoman/generator-backbone">the Yeoman Backbone generator</a> were used to bootstrap the application. <a href="http://requirejs.org/">RequireJS</a> is used to manage dependencies. The application itself lives inside a <a href="http://backbonejs.org/">Backbone</a> framework. <a href="http://gruntjs.com/">Grunt</a> is used to build the webapp and prepare it for deployment. Finally, the app is deployed using git and it lives on <a href="http://pages.github.com/">GitHub pages</a>.</p>

<!-- more -->


<p>All in all, I could not be more pleased with the single-page web app tools I&rsquo;ve discovered and workflow I&rsquo;ve cultivated. Now that I have the workflow in place, I&rsquo;m already looking to the next side project, FoursightSquare, to see just how quickly I can spin up a web app, start iterating on it, and deploy quickly with each iteration. You can follow along in the meanwhile on its Github page.</p>

<p>It&rsquo;s important to note that MaxWell is a proof of concept with hard-coded values. Given an API, this web app could exist in its current form, or, in an API&rsquo;s absence, this app could be pushed to ESPN&rsquo;s servers and hooked up with just a little bit of server-side code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yeoman, Backbone, and a Smarter Client]]></title>
    <link href="http://danubilla.com/blog/web-development/yeoman-backbone-and-a-smarter-client.html"/>
    <updated>2013-08-24T09:29:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/yeoman-backbone-and-a-smarter-client</id>
    <content type="html"><![CDATA[<p>I have gone through a number of tutorials on newer front-end tools like AngularJS, Grunt, and Backbone. Nothing compares to building something of your own, though. After dipping my toe into the water numerous times before, I dove into the deep end and started combining these tools on my own.</p>

<!-- more -->


<p>I started with <a href="http://yeoman.io">Yeoman</a>, as one does. It&rsquo;s a tool to bootstrap your web app. With a few keystrokes on the command line, you have all the files you need to run a web application. Out of the box you get some good tools: the <a href="http://html5boilerplate.com/">HTML5 Boilerplate</a>, <a href="http://jquery.com/">jQuery</a>, and <a href="http://modernizr.com/">Modernizr</a>. You&rsquo;re immediately given the option to add <a href="http://requirejs.org/">RequireJS</a> for handling JavaScript loading dependencies on top of a few other options to get your web app bootstrapped even further. Yeoman starts to get super fancy, however, with its generators. Generators are bundles that allow you to bootstrap on top of the default Yeoman options. If you&rsquo;re building an AngularJS, Backbone or Ember app, download a generator for your project before you start Yeoman up for your latest project.</p>

<p>With Yeoman in play, I decided to go with Backbone, and running Yeoman with <a href="https://github.com/yeoman/generator-backbone">the Backbone generator</a> left me with the perfect shell of a Backbone app to get started. Backbone is an MV<em> framework designed to separate application logic from view logic. (Note the * instead of a C. There are no controllers in Backbone. Instead, much of the logic that ties up the model and the view is actually done in the view JS.) I chose Backbone over other frameworks for a couple of reasons. I really enjoy the way Backbone handles the View. I&rsquo;m able to bind my model and view, and thus, keep my HTML completely separated from whatever framework I&rsquo;m using at the time. I also enjoy the plug-and-play nature of Backbone. I get MV</em> out of the box for very little code weight. If I want to add dependency injection and AMD through RequireJS, I can run that variety of the framework. Backbone gives you options. Thirdly, I really just came across more articles and tutorials that I enjoyed from the Backbone community. When it comes down to it, the community might be the most important reason for choosing a new technology. Regardless of the framework you prefer, choose one, and get coding on the front-end, smarter and faster.</p>

<p>I&rsquo;ll save my experience with Grunt for another post. The past month of diving into these front-end technologies has been incredibly eye-opening. Client-side code tools have evolved immensely in the past couple of years, and the community creating and maintaining these tools is truly inspiring. Spinning up a web app can be daunting. Creating structure for your code can leave you paralyzed before you&rsquo;ve even begun your own project. Yeoman and Backbone are two tools I&rsquo;m ready to go to war with for every new static-site project I begin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Submodules]]></title>
    <link href="http://danubilla.com/blog/web-development/git-submodules.html"/>
    <updated>2013-07-30T23:50:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/git-submodules</id>
    <content type="html"><![CDATA[<p>I normally feel fairly well-versed in Git, which is to say, I can commit code, I can see what&rsquo;s happening, and I generally know enough to not screw anything up. I thought my Git Fu was tight enough that I at least had a good grasp on all that could be done with the version control system until I came across a project that used submodules. In Git, a submodule is a connection from one repository to another. Say, for instance, you&rsquo;re working on a suite of similar products. You want each one to have its own repository. That makes plenty of sense. But suppose each of these products shared a common messaging platform. Instead of maintaining this same code across the suite of products, which would defeat a lot of the purpose of setting up a VCS, you can give it its own subrepo, and have each product in your suite set up a submodule to reference that repo. All seems well and good, but there are a few gotchas to keep in mind.</p>

<!-- more -->


<p>Let&rsquo;s clone a repo that uses submodules down to local. You start making some changes, gunning away on some code, and you&rsquo;re feeling really good. So, you decide to check your progress so far with a good old <code>git diff</code>. Everything looks exactly as you expect except for this one bit of output:</p>

<blockquote>
&#8212; a/lib/messaging
+++ b/lib/messaging
</blockquote>


<p>That seems odd. There should be all sorts of good stuff in the messaging directory. And there is, but as it turns out, your main repository, or superrepo, is not keeping track of any of the minutiae inside the subrepo. All it keeps track of is the commit id associated with that repo. When you need to update your subrepo, a simple <code>git submodule update</code> command runs through your list of submodules and pulls from each of the associated subrepos. How does your superrepo know about the submodules? That brings us to the .gitmodules file in the root of your project.</p>

<p>The .gitmodules file is a git config file that contains references to each of your repo&rsquo;s submodules. Each reference consists of a name, a path to the submodule in your repo, and a link to where the subrepo can be cloned from. Going back to our example, let&rsquo;s take a look at how our suite of products would share a messaging library:</p>

<blockquote>
[submodule &#8220;messaging&#8221;]
      path = lib/messaging
      url = git://github.com/dubilla/Messaging.git
</blockquote>


<p>As you can imagine, your .gitmodules config file should be included in your repot and should NOT be listed in your .gitignore file. Solid. We&rsquo;re getting a decent handle on this whole Git submodules thing. Now let&rsquo;s go back to a simpler time when we first cloned the repo with submodule references, but this time, let&rsquo;s do things the right way by initializing our submodules locally.</p>

<p>Alright, we&rsquo;ve cloned our repo, and we&rsquo;re ready to set up our submodules. We&rsquo;re combing through the directory structure, and we notice an empty <em>lib/messaging</em> directory. This is normal. The superrepo knows it has a directory there, it just has no concept of what&rsquo;s going on inside it. Let&rsquo;s forge that connection. From the root of your repo, run <code>git submodule init</code> to create your .gitmodules file. Then, run <code>git submodule update</code> to get all of the code for each submodule in your project. Voilà. You&rsquo;re up and running your cloned repo with submodules in tow.</p>

<p>The title of this post is &ldquo;Git Submodules and Private Repos&rdquo;, so we&rsquo;re not quite out of the woods yet. There&rsquo;s one major caveat. If your submodule is referencing a private repo, you need to update your .gitmodules file to use a specific format for the path to that repo. That reference url must be of the format:</p>

<blockquote>git@github.com:[user]/repo.git</blockquote>


<p>Otherwise, you&rsquo;re likely to get an error stating that the repo could not be found. One last thing to note regarding updating the .gitmodules file. Sometimes editing your .gitmodules file is not enough to update your submodule references. Git submodules contain an oddly two-tiered configuration between the .gitmodules and .git/config/ files. So if you update .gitmodules and start running git submodule update and seeing an older path listed in the output, there&rsquo;s a good chance the .git/config file simply never got updated. You can fix this by hand in the file or running <code>git config submodule.[submodule].url [newurl]</code> to update the config file. This can be fairly annoying, but once submodules are set up correctly for your repo, you shouldn&rsquo;t have to update any of them on a regular basis.</p>

<p>Overall, submodules seem like a tool best suited for larger products and larger teams. I don&rsquo;t have any experience regarding referencing libraries I don&rsquo;t own as submodules, which could bring in a whole new world of submodule management. Imagine tweaking the library locally to fit your projects&#8217; needs, and then getting the latest on the subrepo as commits are pushed completely separate of your implementation. While it could be very useful, you&rsquo;ll most likely have a fair amount of merging in your future. Have you dealt with submodules in this advanced way? Are you just getting started like I am? Have you started <a href="http://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/" title="Coding Killed the Cat Blog">bemoaning submodules</a> and <a href="http://blogs.atlassian.com/2013/05/alternatives-to-git-submodule-git-subtree/" title="Atlassian Blog">praising</a> git subtrees yet? Start some talking in the comments.</p>

<h4>References</h4>


<ol>
<li><a href="http://git-scm.com/book">Pro Git</a>: <a href="http://git-scm.com/book/en/Git-Tools-Submodules"><a href="http://git-scm.com/book/en/Git-Tools-Submodules">http://git-scm.com/book/en/Git-Tools-Submodules</a></a>, as always is fantastic and provided most of the guidance in my Git submodule education</li>
<li><a href="https://groups.google.com/forum/#!forum/github">Github Google Groups</a>: <a href="https://groups.google.com/forum/#!topic/github/B5VuXiO3aU0"><a href="https://groups.google.com/forum/#!topic/github/B5VuXiO3aU0">https://groups.google.com/forum/#!topic/github/B5VuXiO3aU0</a></a>, paved the path to healing my private repo submodule wounds.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bower: Your Third-Party Front-End Code Assistant]]></title>
    <link href="http://danubilla.com/blog/web-development/bower-your-third-party-front-end-code-assistant.html"/>
    <updated>2013-07-20T10:36:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/bower-your-third-party-front-end-code-assistant</id>
    <content type="html"><![CDATA[<p>As I&rsquo;ve started diving into more client-side heavy web apps, I&rsquo;m finding myself constantly asking why any given tool was developed. Lots of web technologies can look cool, but what problem is each trying to solve. Bower was one that mystified me, even as I let <a href="http://yeoman.io/">Yeoman</a> go ahead and install it in my latest project. It describes itself as a package manager for the web. As a user of npm, I was aware of various packages and tools that can be installed, but I did not understand what packages Bower could be capable of handling. What problem is Bower trying to solve?</p>

<!-- more -->


<p>It turns out Bower speeds up my work process in a way I didn&rsquo;t really complain about, but now that I&rsquo;ve seen the light, I am never going back. For Bower, any third-party code library for the front-end is a package. Backbone, RequireJS, Jasmine, and countless other scripts can all be installed in your project with a simple</p>

<blockquote>bower install</blockquote>


<p>command. If you want to be see what&rsquo;s out there and available, search through available Bower packages with</p>

<blockquote>bower search</blockquote>


<p> Feel free to mess around with Bower, and when you&rsquo;re done, simply</p>

<blockquote>bower uninstall</blockquote>


<p> any scripts you deem unnecessary.</p>

<p>I never thought the workflow of cloning a git repository into a local project was ever much of a pain, but I will gladly let Bower do all of the heavy lifting for me. I think the ability to quickly uninstall a package is hands-down the best feature. Give Bower a shot even for your smaller projects, and I doubt you&rsquo;ll go back either.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Selectors with Valueless Attributes]]></title>
    <link href="http://danubilla.com/blog/web-development/jquery-selectors-with-valueless-attributes.html"/>
    <updated>2012-07-26T12:06:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/jquery-selectors-with-valueless-attributes</id>
    <content type="html"><![CDATA[<p>It goes without saying that the possibilities involving jQuery Selectors are vast. I recently needed to select all table cells within a given table that only spanned one row. The start to this seemed easy enough. The not selector would be able to target all td’s with a rowspan, but how could the selector cover all possible rowspans? It might be easy to assume that the values would be small enough.</p>

<!-- more -->




<blockquote>
jQuery(“td:not([rowspan=&#8217;2&#8217;]):not([rowspan=&#8217;3&#8217;]):not([rowspan=&#8217;4&#8217;])”)
</blockquote>


<p>This selector becomes unwieldy quickly. Not only does the selector look daunting, the code is simply fragile. What happens when a table cell with a rowspan of 5 comes along. It becomes a silly arm’s race. Luckily, jQuery allows attribute selectors without values. So a simple selector such as</p>

<blockquote>
jQuery(“td:not([rowspan])”)
</blockquote>


<p>works beautifully.</p>

<p>This of course makes more sense when you consider attributes that don’t necessarily need values. So selecting all inputs that aren’t disabled can be done like so:</p>

<blockquote>
jQuery(“input:not([disabled])”)
</blockquote>


<p>Any other easy jQuery selector involving attributes without values? Share them below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 and Media Queries]]></title>
    <link href="http://danubilla.com/blog/web-development/html5-and-media-queries.html"/>
    <updated>2011-07-29T22:50:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/html5-and-media-queries</id>
    <content type="html"><![CDATA[<p>I finally took it upon myself to tackle HTML5, and you are looking at the results.  Of course, implementing any form of HTML5 isn&rsquo;t necessarily rewriting all of your markup with fancy new &lt;section&gt; and &lt;nav&gt; tags nor does it have to be adding HTML5 native Javascript.  The first step is the simplest, but it&rsquo;s a first step nonetheless.  I started by simply replacing my doctype with &lt;! DOCTYPE HTML5&gt;.  Gorgeous in its simplicity, no?  This change alone will give you HTML5  features in all modern browsers<sup>1</sup>.</p>

<!-- more -->


<p>The first step was so easy, I decided to take some more.  I ripped out the header and footer of my Wordpress template and filled it in with some of <a title="Paul Irish" href="http://paulirish.com/" target="_blank">Paul Irish</a>&rsquo;s <a title="HTML5 Boilerplate" href="http://html5boilerplate.com/" target="_blank">HTML5 Boilerplate</a>.  After, fighting off the fright and intimidation, I was able to follow along with the comments and decide what was needed from the boilerplate, what I wanted, and what I could toss away.  There&rsquo;s a corresponding CSS file with fantastic default styles and even some placeholders for media queries.  Which, in fact, is where I tidied up my work.  Check out this site on webkit-enabled mobile device (iPhone, Android, etc), and you should see a nice, readable mobile layout.  It&rsquo;s by no means perfect, but I would consider the site mobile-enhanced.</p>

<div class="references">
<h5>References</h5>
<ol>
    <li>John Resig, HTML5 DOCTYPE, <a title="http://ejohn.org/blog/html5-doctype/" href="http://ejohn.org/blog/html5-doctype/" target="_blank">http://ejohn.org/blog/html5-doctype/</a>
</li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Davis Square Flag]]></title>
    <link href="http://danubilla.com/blog/design/davis-square-flag.html"/>
    <updated>2010-06-26T14:10:00-04:00</updated>
    <id>http://danubilla.com/blog/design/davis-square-flag</id>
    <content type="html"><![CDATA[<p>I came across <a title="Neighborhood Flags" href="http://awesome.good.is/projects/neighborhood-flags/index.html">this project</a> for Good magazine in which a collection of designers and illustrators were called upon to design flags for their respective neighborhoods.  Some were beautiful in their simplicity, others appeared to be the product of designers trying to show of their skills rather than fit the creative limitations.</p>

<!-- more -->


<p>Needless to say, I went for the more simplistic route in designing a flag for my Boston-area neighborhood, Davis Square.</p>

<p><img class="aligncenter size-full wp-image-143" src="http://danubilla.com/images/author/davis-square-flag.gif" width="250" height="168" title=";davis square flag text' 'Davis Square Flag'" ></p>

<p>Have a design for your neighborhood you want to share?  Critique of mine?  Share them in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Importance of bind() in jQuery]]></title>
    <link href="http://danubilla.com/blog/web-development/the-importance-of-bind-in-jquery.html"/>
    <updated>2010-05-17T12:00:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/the-importance-of-bind-in-jquery</id>
    <content type="html"><![CDATA[<p>The jQuery library has always been held in high appeal for its gradual learning curve and generally quick implementation.  The API is concise and includes such simple event watching nomenclature as show(), hide(), ready(), submit(), focus(), and more.  The one popular event watcher that I kept seeing popping up in script after script was the generic bind() function.  I never fully understood what made implementing the bind function any more desirable than click() or focus() until working on a larger scale javascript project the other day.</p>

<!-- more -->


<p><em>Any element with two event watchers where one must be expired <strong>requires</strong> the bind function.</em></p>

<p>Imagine a tabbed user interface wherein the content is loaded via ajax.  If both event watchers are on click, the ajaxing needs to be expired while the tabbed javascript must stay active.  With binding, an event can be passed that can then be expired at the end of the function.  The bind function gives you a greater amount of control over event expiration than any of the jQuery shortcut functions can provide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maintenance Month]]></title>
    <link href="http://danubilla.com/blog/web-development/maintenance-month.html"/>
    <updated>2010-05-10T14:38:00-04:00</updated>
    <id>http://danubilla.com/blog/web-development/maintenance-month</id>
    <content type="html"><![CDATA[<p>Following Chris Coyier&rsquo;s <a href="http://css-tricks.com/may-is-maintenance-month/">lead</a>, I decided to go back and clean up some parts of the re-design I had neglected.  It took some digging into pages and posts that I barely touched, and that have barely been seen, so I was glad to have the push.</p>

<!-- more -->


<p>Some fixes you&rsquo;ll see:</p>

<ul>
    <li>Images from the Archives: After moving my site from /blog to the root of my domain, a few image links became broken.  I was fearful that I&#8217;d have to dig into the meta data of the wordpress install to designate the new image folder, but I had actually linked the images on the site absolutely, a big no-no regardless.  Simple fix, and finally implemented.</li>
    <li>Archive, Post, and Page Layout: I wasn&#8217;t sure at the time about including the sidebar on all child pages, so I left these layouts in limbo, including the sidebar, but not doing it very well.  The CSS was in place, so a bit more html markup completed the changes.</li>
    <li>Post Navigation: The post navigation had some float issues.  Since every element in the post navigation div was floated, a clearing element needed to be introduced so that the subsequent html didn&#8217;t run right up into it.  IE7 has a margin-bottom bug with floated elements, so instead of introducing a bottom margin on the post navigation, I merely threw a top margin on the post.</li>
</ul>


<p>Have you started maintenance on your own site this month?  Plan to begin in the coming weeks?  Leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Like a plane crash that never hits the ground]]></title>
    <link href="http://danubilla.com/blog/music/like-a-plane-crash-that-never-hits-the-ground.html"/>
    <updated>2010-01-27T20:04:00-05:00</updated>
    <id>http://danubilla.com/blog/music/like-a-plane-crash-that-never-hits-the-ground</id>
    <content type="html"><![CDATA[<p>As a songwriter, I&rsquo;ve always been amazed at what comes out depending on what&rsquo;s going on in my life.  When things were going well for me, my friend and bandmates would joke that things needed to get worse or the music would suffer.  They were more right than they might have thought.</p>

<!-- more -->


<p>Matt Skiba on Alkaline Trio&rsquo;s new album, This Addiction:</p>

<blockquote>
Yeah, I was pretty angst-y and heartbroken when I wrote all of those songs. And I think that has a lot to do with the tone of the record because I hadn’t been in that sort of mind frame for a while. I think a lot of people feel angry and heartbroken about whatever it is they might be going through—politics, relationships, friendships, a cat dying—whatever the case may be. And I had some things go on in my life that just brought me back to that very drunk, very angry and sad young man that I was ten years ago. I never went completely off the deep end but I had some dark times and therefore there is some darkness. Not spooky dark, just sad and angry shit.</blockquote>


<p>The rest of the interview can be found <a href="http://suicidegirls.com/interviews/Matt%20Skiba%3A%20Alkaline%20Trio">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preparing DanUbilla.com 2.0]]></title>
    <link href="http://danubilla.com/blog/web-development/preparing-danubilla-dot-com-2-dot-0.html"/>
    <updated>2010-01-02T17:58:00-05:00</updated>
    <id>http://danubilla.com/blog/web-development/preparing-danubilla-dot-com-2-dot-0</id>
    <content type="html"><![CDATA[<p>When I threw together the design you see on this very blog, I did it haphazardly and quickly just to get a bit of presentation to frame my entries.  It was always meant to be a dynamic frame, one that I could use as a training ground to various tips and tricks I picked up through my work, both professional and personal.  Looking at the current layout and site hierarchy in more depth, I&rsquo;ve decided to scratch most of what little you see here and strip down to the bare essentials.  By re-focusing on the content before continuing on with exploring new design techniques, I&rsquo;ll be able to re-imagine this web space to become not only the design and development playground that I originally intended it to be, but to be a proper gallery of my accomplishments and pursuits.  In breaking things down, I plan on following three tenants and lines of thinking that I&rsquo;ve come across in the past six months since introducing this site:</p>

<!-- more -->


<ul>
<li><a title="Make Your Mockup in Markup" href="http://24ways.org/2009/make-your-mockup-in-markup">Make Your Mockup in Markup</a> &ndash; a fantastic argument to ditch Photoshop and design straight in the browser by Meagan Fisher of <a title="Simple Bits" href="http://simplebits.com/">Simplebits</a>.</li>
<li><a title="Walls Come Tumbling Down" href="http://www.stuffandnonsense.co.uk/blog/about/walls_come_tumbling_down_presentation_slides_and_transcript/">Walls Come Tumbling Down</a> &ndash; the original presentation by Andy Clarke of <a title="Stuff and Nonsense" href="http://www.stuffandnonsense.co.uk/">Stuff and Nonsense</a> that inspired the preceeding article.</li>
<li><a href="http://dowebsitesneedtolookexactlythesameineverybrowser.com/">This fabulous idea</a> that allows me the exploration of cutting-edge technologies without forgetting the end user.</li>
</ul>


<p>In addition to these inspirations, the new site will include a focus on typography and minimalism, both of which should provide a new spotlight on content.</p>

<p>What you&rsquo;ll see as a visitor will be a constantly changing design as I will be working in the browser, and, for the most part, pushing updates to the live site as quickly as possible.  While this is not the most professional approach, I will consider this site an academic case study and web development playground for the next few months.  For those interested in design and coding, I will be posting periodic updates on the what, why, and how of the developing site.  For those interested in areas of the site, I would ask you to not mind the mess, but the idea is that no proverbial under construction sign is needed, that the site will be functional and accessible at every stage.</p>

<p>Thanks for staying tuned and for your general interest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling cURL in XAMPP]]></title>
    <link href="http://danubilla.com/blog/web-development/enabling-curl-in-xampp.html"/>
    <updated>2009-12-12T16:04:00-05:00</updated>
    <id>http://danubilla.com/blog/web-development/enabling-curl-in-xampp</id>
    <content type="html"><![CDATA[<p>Implementing cURL in an XAMPP environment for the first time can cause a quick, early headache.  The most common error seen is a simple curl_init() can not be found.  Luckily, the solution is most likely simple.   cURL comes included with Apache but not installed, so you have to go in and turn it on yourself.</p>

<p>Open up your php.ini located under the /php directory.  The line that needs editing will read: ;extension=php_curl.dll.  Simply remove the semi-colon to uncomment the line.  Then restart Apache to finish the change!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Back]]></title>
    <link href="http://danubilla.com/blog/ramblings/going-back.html"/>
    <updated>2009-07-26T16:08:00-04:00</updated>
    <id>http://danubilla.com/blog/ramblings/going-back</id>
    <content type="html"><![CDATA[<p><img class="aligncenter size-full wp-image-96" src="http://danubilla.com/images/www/shedeservesit.jpg" width="400" height="268" title="She Deserves It" alt="She Deserves It"></p>

<p>The ambiguity of the narrator on this Post Secret really struck a chord.  The possibilities of all three roles are endless and striking.  Why did the male lead leave?  What is the female lead doing in the meanwhile?  We do know the male character is coming back; it&rsquo;s simply a matter of when.  How is the narrator related to either of the main characters?  And what to make of the starry, dreamy night sky backdrop?</p>

<p>It works because the reader has enough information to create their own version of the story.  What&rsquo;s your version?</p>
]]></content>
  </entry>
  
</feed>
